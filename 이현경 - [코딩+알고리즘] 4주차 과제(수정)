{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"이현경 - [코딩+알고리즘] 4주차 과제(수정)","provenance":[],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3.8.3 64-bit ('eval': conda)","language":"python","name":"python_defaultSpec_1595895670236"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3-final"}},"cells":[{"cell_type":"markdown","metadata":{"id":"wS0WJ3F9SoRp"},"source":["# 4주차 과제 공지사항\n","\n","----\n","\n","1. 아래의 과제를 보고 코드를 작성하시면 됩니다.\n","2. 멘토님께서 과제에 대한 코드를 실행한 후에 정량적/정성적으로 평가가 됩니다.\n","3. 멘토님께서는 과제평가에 대한 체크리스트를 작성한 뒤에 객관적으로 코드에 대한 평가를 할 예정입니다.\n","4. 과제에 대한 점수는 100점 만점으로 진행이 됩니다.\n","5. 퀴즈 및 과제에 대한 평가는 모든 수강생들의 평가가 완료되면 확인할 수 있습니다. 참고부탁드립니다.\n","6. 퀴즈 및 과제기한은 11월 22일(일) 저녁 10시 까지 입니다. 10시 이후에는 코드작성이 불가하오니 이 점 참고부탁드립니다.\n","7. 미션통과 대상자의 경우, 평균 5주차 말 / 6주차 초에 미션환급액이 입금이 될 예정입니다. 참고부탁드립니다.\n","8. 반드시 코드 작성란에만 코드를 작성하시고, 그 외에는 절대로 내용을 수정하지 마세요.\n","9. 작성란에 작성된 코드가 동작하는지 반드시 확인하세요. 코드가 동작하지 않으면 0점처리됩니다.\n","10. 과제의 채점 시 입력은 달라질 수 있습니다. 다른 입력에도 동작할 수 있는 코드를 작성해 주세요.\n","11. ***예시 입출력이 주어진 경우, 최소한 예시 입력에 대해 출력이 정상적으로 이루어져야 점수가 주어집니다. 예시 입력에 대해 동작시키는 것은 과제 제출의 최소 조건입니다.***\n","12. ***예시 입력에 대해 출력이 정상적으로 되더라도, 코드의 내용이 적합하지 않은 경우 감점이 이루어집니다.***\n","\n","----"]},{"cell_type":"markdown","metadata":{"id":"O4MMgk1OTzmH"},"source":["----\n","\n","## 종합 점수 (/100)\n","\n","----"]},{"cell_type":"markdown","metadata":{"id":"JoFcF8ljTR6p"},"source":["## 과제1.\n","\n","----\n","주어진 기반 코드를 완성하여, 소수를 순서대로 반환하는 제네레이터를 구현하시오. max_iter 횟수 만큼 출력하도록 하시오. 함수를 구현하는 데에 사용한 모듈을 import하는 코드를 답안에 반드시 포함하시오.\n","\n","```python\n","class PrimeNumberGenerator:\n","    def __init__(self, max_iter):\n","        self.max_iter = max_iter\n","    \n","    def __iter__(self):\n","        pass\n","```\n","\n","아래 주어진 테스트 코드에서 반드시 정상 동작하도록 코드를 작성하시오.\n","\n","```python\n","# Test code\n","gen = PrimeNumberGenerator(10)\n","for x in gen:\n","    print(x)\n","```\n","\n","----"]},{"cell_type":"code","metadata":{"id":"MpNgU-Ftq8Oh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606570168992,"user_tz":-540,"elapsed":1096,"user":{"displayName":"이현경","photoUrl":"","userId":"18126673338675683394"}},"outputId":"898e7f70-d088-4333-c9bc-549ef5a47faf"},"source":["# 과제1번 코드란\n","'''\n","import itertools\n","from collections import abc\n","\n","class PrimeNumberGenerator:\n","    def __init__(self, max_iter):\n","        self.max_iter = max_iter\n","\n","\n","    def __iter__(self):\n","        \n","        #lt = []\n","        \n","        for n in range(2, self.max_iter+1):\n","          count = 0\n","\n","          for x in range(2, self.max_iter+1):\n","            if n % x != 0:\n","              count += 1\n","            \n","          if count == 1:\n","            #lt.append(n)\n","            yield n\n","'''\n","\n","class PrimeNumberGenerator:\n","    def __init__(self, max_iter):\n","        self.max_iter = max_iter\n"," \n","    def __iter__(self):\n","        count = 0\n","        n = 1\n","\n","        def is_prime(x):\n","          factorized = list()\n","          for idx in range(1, x+1):\n","            if x % idx == 0:\n","              factorized.append(idx)\n","          return len(factorized) == 2\n","\n","\n","\n","        \n","        for count in range(self.max_iter): # max_iter 만큼 실행\n","          while is_prime(n) is False:\n","            n += 1\n","          yield n\n","\n","          n += 1 # yield 에서 다음 차례 ?\n","\n","\n","        \n","\n","\n","\n","# Test code\n","gen = PrimeNumberGenerator(10)\n","for x in gen:\n","    print(x)\n","\n","\n","\n","\n","\n"],"execution_count":20,"outputs":[{"output_type":"stream","text":["2\n","3\n","5\n","7\n","11\n","13\n","17\n","19\n","23\n","29\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jmayiflbYYW6"},"source":["## 과제2.\n","\n","----\n","아래 기능을 수행하는 coroutine 함수를 구현하시오.\n","\n","- coroutine 생성 시 정수 n을 입력받는다.\n","- 매번 실행 시 정수 x를 입력받는다.\n","- coroutine의 상태는 현재까지 입력받은 x값 중 가장 작은 수이다.\n","- coroutine은 n번까지 실행 후 종료된다.\n","\n","```python\n","def coroutine(n):\n","    pass\n","```\n","\n","아래 주어진 테스트 코드에서 반드시 정상 동작하도록 코드를 작성하시오.\n","\n","```python\n","# Test code\n","c = coroutine(4)\n","next(c)\n","print(c.send(20))\n","print(c.send(4))\n","print(c.send(5))\n","print(c.send(7))\n","try:\n","    print(c.send(2))\n","except StopIteration:\n","    print('successful')\n","```\n","\n","\n","----"]},{"cell_type":"code","metadata":{"id":"bmA6c6EMYY7o","colab":{"base_uri":"https://localhost:8080/","height":154},"executionInfo":{"status":"ok","timestamp":1606569780660,"user_tz":-540,"elapsed":1421,"user":{"displayName":"이현경","photoUrl":"","userId":"18126673338675683394"}},"outputId":"8c010166-170f-43d9-99a3-6fb1c1d98474"},"source":["# 과제 2번 코드란\n","\n","def coroutine(n):\n","  x = yield\n","  y_min_val = x\n","\n","  for a in range(n): # n 번 실행\n","    x = yield y_min_val\n","    y_min_val = min([y_min_val,x])\n","    #print('>>> coroutine Min Value : {}'.format(y_min_val))\n","\n","'''\n","def coroutine(n):\n","    x = yield\n","    min_val = x\n","    for idx in range(n):\n","        x = yield min_val\n","        min_val = min([x, min_val])\n","'''\n","\n","# Test code\n","c = coroutine(4)\n","next(c)\n","print(c.send(20)) # 20\n","print(c.send(4)) # 4\n","print(c.send(5)) # 4\n","print(c.send(7)) # 4\n","try:\n","    print(c.send(2)) # 2 x -> StopIteration(=> Successful ! )\n","except StopIteration:\n","    print('successful')\n","\n","\n","\n","'''처음 제출한 코드 결과\n",">>> coroutine started.\n",">>> coroutine first recieved : 20\n","4\n",">>> coroutine next recieved : 4\n",">>> coroutine Min Value : 4\n","4\n",">>> coroutine next recieved : 5\n",">>> coroutine Min Value : 4\n","4\n",">>> coroutine next recieved : 7\n",">>> coroutine Min Value : 4\n","4\n",">>> coroutine next recieved : 2\n",">>> coroutine Min Value : 2\n","successful\n","'''\n","\n"],"execution_count":18,"outputs":[{"output_type":"stream","text":["20\n","4\n","4\n","4\n","successful\n"],"name":"stdout"},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'처음 제출한 코드 결과\\n>>> coroutine started.\\n>>> coroutine first recieved : 20\\n4\\n>>> coroutine next recieved : 4\\n>>> coroutine Min Value : 4\\n4\\n>>> coroutine next recieved : 5\\n>>> coroutine Min Value : 4\\n4\\n>>> coroutine next recieved : 7\\n>>> coroutine Min Value : 4\\n4\\n>>> coroutine next recieved : 2\\n>>> coroutine Min Value : 2\\nsuccessful\\n'"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"fzlpa3FVZpcL"},"source":["## 과제3.\n","\n","----\n","\n","`__slots__`를 사용하여 최적화된 클래스를 구현하시오. 아래 조건을 만족하도록 구현하시오.\n","\n","- 클래스의 이름은 `Vector3D`로 한다.\n","- 클래스의 멤버 변수는 `x`, `y`, `z`로 한다.\n","- 클래스의 사칙연산을 구현한다.\n","  - Vector3D 객체끼리의 합과 차는 `x`, `y`, `z`를 각각 합/차를 구해 Vector3D로 반환한다.\n","  - Vector3D 객체끼리의 곱은 내적 (`x1 * x2 + y1 * y2 + z1 * z2`)을 숫자로 반환한다.\n","  - Vector3D 객체끼리의 나눗셈은 `NaN`을 반환한다.\n","  - 그 외에 모든 경우 `NotImplementedError` 예외를 발생시킨다.\n","- 클래스를 print()로 출력할 경우, 아래 포맷으로 출력한다.\n","  - `\"Vector3D (%.3f, %.3f, %.3f)\" % (x, y, z)`\n","\n","\n","아래 주어진 테스트 코드에서 반드시 정상 동작하도록 코드를 작성하시오.\n","\n","```python\n","# Test code\n","\n","a = Vector3D(0.4, 0.6, 0.2)\n","b = Vector3D(1.2, 0.7, 2.1)\n","\n","print(a + b)\n","print(a - b)\n","print(a * b)\n","print(a / b)\n","\n","try:\n","    a * 3\n","except NotImplementedError:\n","    print('successful')\n","except:\n","    pass\n","\n","try:\n","    a + 2\n","except NotImplementedError:\n","    print('successful')\n","except:\n","    pass\n","\n","try:\n","    a / 4\n","except NotImplementedError:\n","    print('successful')\n","except:\n","    pass\n","```\n","\n","----"]},{"cell_type":"code","metadata":{"id":"pWDpwtNqaPLN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606568768076,"user_tz":-540,"elapsed":883,"user":{"displayName":"이현경","photoUrl":"","userId":"18126673338675683394"}},"outputId":"ec43a71c-9c71-43d0-b894-4bfd0dafa311"},"source":["# 과제 3번 코드란\n","from operator import mul\n","\n","class Vector3D():\n","    __slots__ = ('_x', '_y', '_z',)\n","\n","\n","    def __init__(self, x, y, z): # 초기화\n","      self._x = x\n","      self._y = y\n","      self._z = z\n","\n","    def __str__(self): # print() 문 쓰면 출력\n","      return \"Vector3D (%.3f, %.3f, %.3f)\" % (self._x, self._y, self._z)\n","\n","    def __add__(self, other):\n","      if isinstance(other, Vector3D):\n","        return self._x + other._x, self._y + other._y, self._z + other._z\n","      else:\n","        raise NotImplementedError # 미구현 예외 발생시키기\n","\n","    def __sub__(self, other):\n","      if isinstance(other, Vector3D):\n","        return self._x - other._x, self._y - other._y, self._z - other._z\n","      else:\n","        raise NotImplementedError # 미구현 예외 발생시키기\n","        \n","    def __mul__(self, other):\n","      if isinstance(other, Vector3D):\n","        return ((self._x) * (other._x) + (self._y) * (other._y) + (self._z) * (other._z))\n","      else:\n","        raise NotImplementedError # 미구현 예외 발생시키기\n","\n","    def __truediv__(self, other): # 실수 나누기\n","      if isinstance(other, Vector3D):\n","        return float('nan')\n","      else:\n","        raise NotImplementedError # 미구현 예외 발생시키기\n","\n","\n","\n","# Test code\n"," \n","a = Vector3D(0.4, 0.6, 0.2)\n","b = Vector3D(1.2, 0.7, 2.1)\n"," \n","print(a + b)\n","print(a - b)\n","print(a * b)\n","print(a / b)\n"," \n","try:\n","    a * 3\n","except NotImplementedError:\n","    print('successful')\n","except:\n","    pass\n"," \n","try:\n","    a + 2\n","except NotImplementedError:\n","    print('successful')\n","except:\n","    pass\n"," \n","try:\n","    a / 4\n","except NotImplementedError:\n","    print('successful')\n","except:\n","    pass\n","\n","print(a)\n","print(b)\n","\n","''' 처음 제출했던 코드 결과\n","(1.6, 1.2999999999999998, 2.3000000000000003)\n","(-0.7999999999999999, -0.09999999999999998, -1.9000000000000001)\n","1.3199999999999998\n","NaN\n","successful\n","Vector3D (0.400, 0.600, 0.200)\n","Vector3D (1.200, 0.700, 2.100)\n","'''"],"execution_count":2,"outputs":[{"output_type":"stream","text":["(1.6, 1.2999999999999998, 2.3000000000000003)\n","(-0.7999999999999999, -0.09999999999999998, -1.9000000000000001)\n","1.3199999999999998\n","nan\n","successful\n","successful\n","successful\n","Vector3D (0.400, 0.600, 0.200)\n","Vector3D (1.200, 0.700, 2.100)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pVygrfyBZ-mf"},"source":["## 과제4.\n","\n","----\n","\n","아래와 같은 기능을 하는 데코레이터 함수를 구현하시오. 함수를 구현하는 데에 필요한 모듈을 import하는 코드를 답안에 반드시 포함하시오.\n","\n","- 데코레이터 함수의 이름은 `coroutine`으로 한다.\n","- primer의 데코레이터로 사용되며, 아래 기능을 수행한다.\n","  - primer로부터 coroutine을 반환한다.\n","  - coroutine의 첫 yield문까지 실행시켜, 곧바로 send가 가능하게 한다.\n","  - 첫 yield문까지 실행하는 과정에서 시간이 1초 이상 소요될 경우, `TimeOutError` 예외를 발생시킨다.\n","  \n","아래 주어진 테스트 코드에서 반드시 정상 동작하도록 코드를 작성하시오.\n","\n","```python\n","# Test code\n","\n","@coroutine\n","def delayed_coroutine(n):\n","    time.sleep(n)\n","    n = yield\n","    while True:\n","        n = yield n\n","\n","c = delayed_coroutine(0.5)\n","print(c.send(1))\n","print(c.send(2))\n","print(c.send(3))\n","\n","try:\n","    c = delayed_coroutine(1.2)\n","except TimeoutError:\n","    print('succesful')\n","```\n","\n","----"]},{"cell_type":"code","metadata":{"id":"kwYofIu2Z-3e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606049817961,"user_tz":-540,"elapsed":2691,"user":{"displayName":"이현경","photoUrl":"","userId":"18126673338675683394"}},"outputId":"31fddb5c-434a-42b5-8ed0-8cd6c8c0791f"},"source":["# 과제 4번 코드란\n","\n","from functools import wraps\n","import time\n","\n","def coroutine(func):\n","    '''Decorator run until yield'''\n","    @wraps(func)\n","    def primer(*args, **kwargs):\n","        start_t = time.time()\n","\n","        gen = func(*args, **kwargs)\n","        next(gen) #     * coroutine의 첫 yield문까지 실행시켜, 곧바로 send가 가능하게 함\n","        \n","        elapsed_t = time.time() - start_t\n","        if elapsed_t > 1.0:\n","            raise TimeoutError # 1초 이상 소요 시 타임아웃에러 발생\n","\n","        return gen\n","    return primer # 클로저\n","\n","\n","\n","# Test code\n"," \n","@coroutine\n","def delayed_coroutine(n): # func\n","    time.sleep(n)\n","    n = yield\n","    while True:\n","        n = yield n # next(gen) 이 호출되면 어기서 멈춰있음\n"," \n","c = delayed_coroutine(0.5)\n","print(c.send(1))\n","print(c.send(2))\n","print(c.send(3))\n"," \n","try:\n","    c = delayed_coroutine(1.2)\n","except TimeoutError:\n","    print('succesful')\n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n","2\n","3\n","succesful\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"kmzckUxxfWkw"},"source":["----\n","\n","**수고하셨습니다!**\n","\n","----"]},{"cell_type":"markdown","metadata":{"id":"tgKiGrOIaU-t"},"source":["## 과제 피드백 작성란\n","\n","----\n","\n","### 과제1(0/25)\n","\n","- 제네레이터를 클래스로 구현하는 문제였습니다!\n","\n","- 아래 정답 예제 코드와 테스트용 코드를 첨부하니 확인 부탁드려요 :)\n","\n","```python\n","class PrimeNumberGenerator:\n","    def __init__(self, max_iter):\n","        self.max_iter = max_iter\n","    \n","    def __iter__(self):\n","        count = 0\n","        n = 1\n","\n","        def is_prime(x):\n","            factorized = list()\n","            for idx in range(1, x + 1):\n","                if x % idx == 0:\n","                    factorized.append(idx)\n","            return len(factorized) == 2\n","        \n","        for count in range(self.max_iter):\n","            while is_prime(n) is False:\n","                n += 1\n","            yield n\n","            n += 1\n","\t\t\t\n","\n","gen = PrimeNumberGenerator(10)\n","for x in gen:\n","    print(x)\n","```\n","\n","### 과제2(15/25)\n","\n","- 주어진 기능을 수행하는 coroutine을 구현하는 문제였습니다.\n","\n","- 초기값 설정이 잘못되어 최소값이 정상적으로 구현되지 않아 일부 감점이 있습니다.\n","\n","- 아래 답안 예제코드와 테스트용 코드를 첨부하니, 참고 부탁드립니다 :)\n","\n","```python\n","def coroutine(n):\n","    x = yield\n","    min_val = x\n","    for idx in range(n):\n","        x = yield min_val\n","        min_val = min([x, min_val])\n","\n","c = coroutine(4)\n","\n","next(c)\n","print(c.send(20))\n","print(c.send(4))\n","print(c.send(5))\n","print(c.send(7))\n","try:\n","    print(c.send(2))\n","except StopIteration:\n","    print('successful')\n","```\n","\n","### 과제3(10/25)\n","\n","\n","- `__slots__`를 이용하여 최적화된 클래스를 구현하는 문제였습니다.\n","\n","- 해당 클래스간의 연산을 정의하고, 그 외의 경우에는 미구현 예외를 발생시키도록 하였습니다.\n","\n","- slots에 입력하신 변수명과 실제 변수명이 맞지 않아 동작이 되지 않는 문제가 있습니다! `__slots_ = ('_x', '_y', '_z')`로 변경하시면 문제가 해결됩니다.\n","\n","- 일부 미구현 예외가 구현되지 않아 일부 감점이 있습니다.\n","\n","- 아래 정답 예제와 테스트용 코드를 첨부하니, 참고 부탁드립니다 :)\n","\n","```python\n","class Vector3D:\n","    __slots__ = ('x', 'y', 'z')\n","\n","    def __init__(self, x, y, z):\n","        self.x = x\n","        self.y = y\n","        self.z = z\n","\n","    def __add__(self, x):\n","        if isinstance(x, Vector3D):\n","            return Vector3D(self.x + x.x, self.y + x.y, self.z + x.z)\n","        else:\n","            raise NotImplementedError\n","    \n","    def __sub__(self, x):\n","        if isinstance(x, Vector3D):\n","            return Vector3D(self.x - x.x, self.y - x.y, self.z - x.z)\n","        else:\n","            raise NotImplementedError\n","    \n","    def __mul__(self, x):\n","        if isinstance(x, Vector3D):\n","            return self.x * x.x + self.y * x.y + self.z * x.z\n","        else:\n","            raise NotImplementedError\n","    \n","    def __truediv__(self, x):\n","        if isinstance(x, Vector3D):\n","            return float('nan')\n","        else:\n","            raise NotImplementedError\n","\n","    def __str__(self):\n","        return \"Vector3D (%.3f, %.3f, %.3f)\" % (self.x, self.y, self.z)\n","\n","a = Vector3D(0.4, 0.6, 0.2)\n","b = Vector3D(1.2, 0.7, 2.1)\n","\n","print(a + b)\n","print(a - b)\n","print(a * b)\n","print(a / b)\n","\n","try:\n","    a * 3\n","except NotImplementedError:\n","    print('successful')\n","except:\n","    pass\n","\n","try:\n","    a + 2\n","except NotImplementedError:\n","    print('successful')\n","except:\n","    pass\n","\n","try:\n","    a / 4\n","except NotImplementedError:\n","    print('successful')\n","except:\n","    pass\n","```\n","\n","### 과제4(25/25)\n","\n","\n","수업시간에 배운 기본적인 coroutine 데코레이터 패턴에,\n","초기화가 너무 오래 걸리면 타임아웃 기능을 추가하는 문제였습니다.\n","\n","아래 정답 예제와 함께 테스트용 코드를 첨부하니, 참고 부탁드립니다. :)\n","\n","```python\n","import time\n","\n","def coroutine(primer):\n","    def func(*args, **kwargs):\n","        t_start = time.time()\n","        c = primer(*args, **kwargs)\n","        next(c)\n","        t_elapsed = time.time() - t_start\n","\n","        if t_elapsed > 1.0:\n","            raise TimeoutError\n","\n","        return c\n","    return func\n","\n","\n","@coroutine\n","def delayed_coroutine(n):\n","    time.sleep(n)\n","    n = yield\n","    while True:\n","        n = yield n\n","\n","c = delayed_coroutine(0.5)\n","print(c.send(1))\n","print(c.send(2))\n","print(c.send(3))\n","\n","try:\n","    c = delayed_coroutine(1.2)\n","except TimeoutError:\n","    print('succesful')\n","```\n","\n"]},{"cell_type":"code","metadata":{"id":"_LV2C2Cv4Xft"},"source":[""],"execution_count":null,"outputs":[]}]}