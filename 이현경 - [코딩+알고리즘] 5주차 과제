{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"이현경 - [코딩+알고리즘] 5주차 과제","provenance":[],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"cells":[{"cell_type":"markdown","metadata":{"id":"wS0WJ3F9SoRp"},"source":["# 5주차 과제 공지사항\n","\n","----\n","\n","1. 아래의 과제를 보고 코드를 작성하시면 됩니다.\n","2. 멘토님께서 과제에 대한 코드를 실행한 후에 정량적/정성적으로 평가가 됩니다.\n","3. 멘토님께서는 과제평가에 대한 체크리스트를 작성한 뒤에 객관적으로 코드에 대한 평가를 할 예정입니다.\n","4. 과제에 대한 점수는 100점 만점으로 진행이 됩니다.\n","5. 퀴즈 및 과제에 대한 평가는 모든 수강생들의 평가가 완료되면 확인할 수 있습니다. 참고부탁드립니다.\n","6. 퀴즈 및 과제기한은 11월 29일(일) 저녁 10시 까지 입니다. 10시 이후에는 코드작성이 불가하오니 이 점 참고부탁드립니다.\n","7. 미션통과 대상자의 경우, 평균 6주차 말 / 7주차 초에 미션환급액이 입금이 될 예정입니다. 참고부탁드립니다.\n","8. **반드시 코드 작성란에만 코드를 작성하시고, 그 외에는 절대로 내용을 수정하지 마세요.**\n","9. **작성란에 작성된 코드가 동작하는지 반드시 확인하세요. 코드가 동작하지 않으면 0점처리됩니다.**\n","10. **과제의 채점 시 입력은 달라질 수 있습니다. 다른 입력에도 동작할 수 있는 코드를 작성해 주세요**\n","11. ***예시 입출력이 주어진 경우, 최소한 예시 입력에 대해 출력이 정상적으로 이루어져야 점수가 주어집니다. 예시 입력에 대해 동작시키는 것은 과제 제출의 최소 조건입니다.***\n","12. ***예시 입력에 대해 출력이 정상적으로 되더라도, 코드의 내용이 적합하지 않은 경우 감점이 이루어집니다.***\n","\n","----"]},{"cell_type":"markdown","metadata":{"id":"O4MMgk1OTzmH"},"source":["----\n","\n","## 종합 점수 (/100)\n","\n","----"]},{"cell_type":"markdown","metadata":{"id":"JoFcF8ljTR6p"},"source":["## 과제1.\n","\n","----\n","아래 주어진 기반 코드를 완성하여 Linked Queue를 구현하시오. Linked Queue에 대한 설명을 참조하시오.\n","\n","- Linked Queue의 특징\n","  - Linked Queue는 Doubly Linked List를 기반으로 만들어진 Queue이다.\n","  - Linked Queue의 모든 동작은 O(1)의 시간복잡도로 동작한다.\n","  - Linked Queue에 정의된 동작은 아래와 같다.\n","    1. `is_empty()`: Queue가 비어있으면 True, 비어있지 않으면 False를 출력한다.\n","    1. `put()`: Queue의 rear에 새로운 데이터를 입력한다.\n","    1. `get()`: Queue의 front에서 데이터를 출력한다. 출력한 데이터는 Queue에서 삭제한다. 더이상 출력할 데이터가 없는 경우 None을 출력한다.\n","    1. `peek()`: Queue의 front에서 데이터를 출력한다. 출력한 데이터는 Queue에 그대로 유지한다.  더이상 출력할 데이터가 없는 경우 None을 출력한다.\n","\n","\n","```python\n","class Node:\n","    def __init__(self, data, prev=None, next=None):\n","        self.data = data\n","        self.prev = prev\n","        self.next = next\n","    \n","class LinkedQueue:\n","    def __init__(self):\n","        self.front = None\n","        self.rear = None\n","    \n","    def is_empty(self):\n","        pass\n","    \n","    def put(self, data):\n","        pass\n","    \n","    def get(self):\n","        pass\n","    \n","    def peek(self):\n","        pass\n","    \n","# Test code\n","queue = LinkedQueue()\n","\n","print(queue.is_empty())\n","for i in range(10):\n","    queue.put(i)\n","print(queue.is_empty())\n","\n","for _ in range(11):\n","    print(queue.get(), end=' ')\n","print()\n","\n","for i in range(20):\n","    queue.put(i)\n","print(queue.is_empty())\n","\n","for _ in range(5):\n","    print(queue.peek(), end=' ')\n","print()\n","\n","for _ in range(21):\n","    print(queue.get(), end=' ')\n","print()\n","print(queue.is_empty())\n","\n","```\n","----"]},{"cell_type":"code","metadata":{"id":"MpNgU-Ftq8Oh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606653215493,"user_tz":-540,"elapsed":843,"user":{"displayName":"이현경","photoUrl":"","userId":"18126673338675683394"}},"outputId":"6f05635d-4c39-464f-8b0f-6a1921e318c2"},"source":["# 과제1번 코드란\n","\n","class Node:\n","    def __init__(self, data, prev=None, next=None):\n","        self.data = data\n","        self.prev = prev\n","        self.next = next\n"," \n","class LinkedQueue:\n","    def __init__(self):\n","        self.front = None\n","        self.rear = None\n"," \n","    def is_empty(self):\n","        if self.front == None:\n","          return True\n","        else:\n","          return False\n"," \n","    def put(self, data):\n","        if self.front == None: # head가 없다면\n","            self.front = Node(data)\n","            self.rear = self.front\n","        else: # head가 있다면\n","            node = self.front\n","            while node.next:\n","                node = node.next\n","            # node의 끝을 찾았으면(node.next=None)\n","            new = Node(data) # 새로운 node를 만들고\n","            node.next = new # next\n","            new.prev = node # prev\n","            self.rear = new # 맨 마지막 node -> tail로 업뎃\n","\n","\n","    def get(self):\n","        if self.front == None:\n","          return None\n","        else:\n","          a = self.front.data\n","          # front 삭제\n","          temp = self.front\n","          self.front = self.front.next\n","          del temp\n","          return a\n","        \n","\n","    def peek(self):\n","        if self.front == None:\n","          return None\n","        else:\n","          return self.front.data\n","\n","\n"," \n","# Test code\n","queue = LinkedQueue()\n"," \n","print(queue.is_empty()) # True\n","for i in range(10):\n","    queue.put(i) # 0 1 2 3 4 5 6 7 8 9\n","print(queue.is_empty()) # False\n","\n","for _ in range(11): # 11번 실행\n","    print(queue.get(), end=' ') # 0 1 2 3 4 5 6 7 8 9 None\n","print()\n","\n","for i in range(20): # 0 1 2 3 ... 19\n","    queue.put(i)\n","print(queue.is_empty()) # False\n","\n","for _ in range(5): # 5번 실행\n","    print(queue.peek(), end=' ') # 0 0 0 0 0\n","print()\n","\n","for _ in range(21): # 21번 실행\n","    print(queue.get(), end=' ') # 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 None \n","print()\n","print(queue.is_empty()) # True\n","\n","\n","\n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["True\n","False\n","0 1 2 3 4 5 6 7 8 9 None \n","False\n","0 0 0 0 0 \n","0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 None \n","True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jmayiflbYYW6"},"source":["## 과제2.\n","\n","----\n","아래는 Python의 list를 이용하여 Stack을 구현한 것이다. Stack의 특성을 이용하면 후위 표기법으로 작성된 수식을 계산할 수 있다. 후위 표기법은 연산자를 나중에 표기하는 표기법으로, 아래와 같이 계산한다. 후위 표기법에서 사칙연산의 우선순위는 없다고 가정한다.\n","\n","```\n","10 5 + 2 * 3 /\n","= 15 2 * 3 /\n","= 30 3 /\n","= 10\n","```\n","\n","연산자와 피연산자가 공백으로 구분된다고 할 때, 내부적으로 stack을 유일한 자료구조로 사용하여 후위 표기법으로 표기된 수식을 계산하는 메소드 `calculate()`을 완성하시오.\n","\n","```python\n","class Stack:\n","    def __init__(self):\n","        self.list = list()\n","    \n","    def push(self, data):\n","        self.list.append(data)\n","        \n","    def pop(self):\n","        return self.list.pop()\n","\n","class Calculator:\n","    def __init__(self):\n","        self.stack = Stack()\n","    \n","    def calculate(self, string):\n","        pass\n","\n","# Test code\n","calc = Calculator()\n","print(calc.calculate('4 6 * 2 / 2 +'))\n","print(calc.calculate('2 5 + 3 * 6 - 5 *'))\n","```\n","----"]},{"cell_type":"code","metadata":{"id":"bmA6c6EMYY7o","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606653217590,"user_tz":-540,"elapsed":681,"user":{"displayName":"이현경","photoUrl":"","userId":"18126673338675683394"}},"outputId":"197ae73e-345a-4f2d-b4c8-5f04b65ad82c"},"source":["# 과제 2번 코드란\n","\n","\n","class Stack:\n","    def __init__(self):\n","        self.list = list()\n"," \n","    def push(self, data):\n","        self.list.append(data)\n"," \n","    def pop(self):\n","        return self.list.pop()\n"," \n","class Calculator:\n","    def __init__(self):\n","        self.stack = Stack()\n"," \n","    def calculate(self, string):\n","        for a in range(0, len(string), 2):\n","          # 숫자인 경우\n","          if string[a] != '+' and string[a] != '-' and string[a] != '*' and string[a] != '/':\n","            self.stack.push(int(string[a]))\n","\n","          # 사칙연산인 경우\n","          elif string[a] == '+':\n","            temp = self.stack.list[-2] + self.stack.list[-1]\n","            self.stack.pop()\n","            self.stack.pop()\n","            self.stack.push(temp)\n","          elif string[a] == '-':\n","            temp = self.stack.list[-2] - self.stack.list[-1]\n","            self.stack.pop()\n","            self.stack.pop()\n","            self.stack.push(temp)\n","          elif string[a] == '*':\n","            temp = self.stack.list[-2] * self.stack.list[-1]\n","            self.stack.pop()\n","            self.stack.pop()\n","            self.stack.push(temp)\n","          elif string[a] == '/':\n","            temp = self.stack.list[-2] // self.stack.list[-1]\n","            self.stack.pop()\n","            self.stack.pop()\n","            self.stack.push(temp)\n","        return self.stack.list[-1]\n","\n","\n","# Test code\n","calc = Calculator()\n","print(calc.calculate('4 6 * 2 / 2 +')) # 14\n","print(calc.calculate('2 5 + 3 * 6 - 5 *')) # 75\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["14\n","75\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fzlpa3FVZpcL"},"source":["## 과제3.\n","\n","----\n","다음은 linkedlist를 구현한 것이다. 이때 linked list는 양방향이 연결된 double linked list이다. 원하는 데이터 노드의 전/후에 노드를 추가하는 `insert_before()`와 `insert_after()` 메소드를 완성하시오.\n","\n","- 아래 테스트 코드에서 에러 없이 동작을 해야 한다.\n","- 예를 들어, `node_mgmt = NodeMgmt(0)`을 통해 인스턴스를 생성한 후, `insert_before(200, 0)`메소드를 실행시키면 200 다음 0 이 차례로 출력되어야 한다.\n","\n","```python\n","class Node:\n","    def __init__(self, data, prev=None, next=None):\n","        self.prev = prev\n","        self.data = data\n","        self.next = next\n","\n","class NodeMgmt:\n","    def __init__(self, data):\n","        self.head = Node(data)\n","        self.tail = self.head\n","    \n","    def insert_before(self, data, before_data):\n","        pass\n","\n","    def insert_after(self, data, after_data):\n","        pass\n","\n","    def insert(self, data):\n","        if self.head == None:\n","            self.head = Node(data)\n","        else:\n","            node = self.head\n","            while node.next:\n","                node = node.next\n","            new = Node(data)\n","            node.next = new\n","            new.prev = node\n","            self.tail = new\n","\n","    def desc(self):\n","        node = self.head\n","        while node:\n","            print (node.data)\n","            node = node.next\n","\n","# Test Code\n","node_mgmt = NodeMgmt(0)\n","for data in range(1, 5):\n","    node_mgmt.insert(data)\n","\n","node_mgmt.insert_before(200, 0)\n","node_mgmt.insert_after(100, 2)\n","node_mgmt.desc()\n","```\n","\n","----"]},{"cell_type":"code","metadata":{"id":"pWDpwtNqaPLN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606653218699,"user_tz":-540,"elapsed":1025,"user":{"displayName":"이현경","photoUrl":"","userId":"18126673338675683394"}},"outputId":"df8fead3-4947-429d-de7f-735d06cd3418"},"source":["# 과제 3번 코드란\n","\n","\n","class Node:\n","    def __init__(self, data, prev=None, next=None):\n","        self.prev = prev\n","        self.data = data\n","        self.next = next\n"," \n","class NodeMgmt:\n","    def __init__(self, data):\n","        self.head = Node(data)\n","        self.tail = self.head\n"," \n","    def insert_before(self, data, before_data):\n","        if self.head == None:\n","            self.head = Node(data)\n","            return True            \n","        else:\n","            node = self.tail\n","            while node.data != before_data:\n","                node = node.prev\n","                if node == None:\n","                    return False\n","\n","            new = Node(data) # 새로 삽입할 Node 객체\n","\n","            # 해당 문제와 같이 맨 앞에 node가 insert될 경우\n","            if node.prev == None: # berfore_new 가 필요 없음\n","              self.head = new\n","              new.next = node\n","              new.prev = None\n","              node.prev = new\n","              return True\n","\n","            # 두 수 사이에 node가 insert될 경우\n","            else:\n","              before_new = node.prev\n","              new.prev = before_new\n","              before_new.next = new\n","              new.next = node\n","              node.prev = new\n","              return True\n"," \n","    def insert_after(self, data, after_data):\n","        if self.head == None:\n","            self.head = Node(data)\n","            return True            \n","        else:\n","            node = self.head\n","            while node.data != after_data:\n","                node = node.next\n","                if node == None:\n","                    return False\n","            new = Node(data)\n","            \n","            after_new = node.next\n","            new.next = after_new\n","            new.prev = node\n","            node.next = new\n","            if new.next == None:\n","                self.tail = new\n","            return True\n"," \n","    def insert(self, data):\n","        if self.head == None:\n","            self.head = Node(data)\n","        else:\n","            node = self.head\n","            while node.next:\n","                node = node.next\n","            new = Node(data)\n","            node.next = new\n","            new.prev = node\n","            self.tail = new\n"," \n","    def desc(self):\n","        node = self.head\n","        while node:\n","            print (node.data)\n","            node = node.next\n"," \n","# Test Code\n","node_mgmt = NodeMgmt(0)\n","for data in range(1, 5):\n","    node_mgmt.insert(data)\n"," \n","\n","node_mgmt.insert_before(200, 0)\n","node_mgmt.insert_after(100, 2)\n","node_mgmt.desc()\n","\n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["200\n","0\n","1\n","2\n","100\n","3\n","4\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7W5Lu-iAk_HP"},"source":["## 과제4.\n","\n","----\n","HashTable 클래스는 문자열을 key로 입력받는 해쉬 테이블 자료구조를 구현한 것이다. HashTable 클래스는 단순한 해쉬 함수로 인해, 해쉬 충돌이 빈번히 발생한다. 이 단점을 개선하기 위해, Chaining 기법으로 ChainedHashTable을 구현하고자 한다.\n","\n","HashTable을 상속하여 해쉬 충돌이 발생해도 정상적으로 동작하는 ChainedHashTable을 완성하시오.\n","\n","```python\n","class HashTable:\n","    def __init__(self):\n","        self.table = [None]*10\n","    \n","    @staticmethod\n","    def hash_func(key):\n","        return ord(key[0]) % 10\n","    \n","    def set(self, key, value):\n","        table[hash_func(key)] = value\n","    \n","    def get(self, key):\n","        return table[hash_func(key)]\n","\n","class Node:\n","    def __init__(self, key, data):\n","        self.key = key\n","        self.data = data\n","        self.next = None\n","    \n","class ChainedHashTable(HashTable):\n","    pass\n","\n","# Test code\n","\n","ht = ChainedHashTable()\n","ht.set('hello', 1)\n","ht.set('hello2', 2)\n","ht.set('hello3', 3)\n","ht.set('hello4', 4)\n","\n","print(ht.get('hello'), end=' ')\n","print(ht.get('hello2'), end=' ')\n","print(ht.get('hello3'), end=' ')\n","print(ht.get('hello4'), end=' ')\n","print()\n","\n","ht.set('hello2', 5)\n","\n","print(ht.get('hello'), end=' ')\n","print(ht.get('hello2'), end=' ')\n","print(ht.get('hello3'), end=' ')\n","print(ht.get('hello4'), end=' ')\n","```\n","\n","----"]},{"cell_type":"code","metadata":{"id":"CKSeAu7Vk_HQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606653219621,"user_tz":-540,"elapsed":1530,"user":{"displayName":"이현경","photoUrl":"","userId":"18126673338675683394"}},"outputId":"bcbb8d04-0fa0-4469-ad39-8c62f8cd5304"},"source":["# 과제 4번 코드란\n","\n","class HashTable:\n","    def __init__(self):\n","        self.table = [None]*10\n"," \n","    @staticmethod\n","    def hash_func(key):\n","        return ord(key[0]) % 10\n"," \n","    def set(self, key, value):\n","        table[hash_func(key)] = value\n"," \n","    def get(self, key):\n","        return table[hash_func(key)]\n"," \n","class Node:\n","    def __init__(self, key, data):\n","        self.key = key\n","        self.data = data\n","        self.next = None\n"," \n","class ChainedHashTable(HashTable): # HashTable의 메소드들을 상속받음      \n","\n","    def set(self, key, value): # 오버라이딩?\n","        hash_address = self.hash_func(key)\n","\n","        if self.table[hash_address] != None: # 값이 있다면\n","            for index in range(len(self.table[hash_address])):\n","              if self.table[hash_address][index][0] == key:\n","                self.table[hash_address][index][1] = value\n","                return True\n","            self.table[hash_address].append([key, value])\n","        else:\n","            self.table[hash_address] = [[key, value]] # 리스트로 값 추가\n","            return True\n","\n","\n","\n","    def get(self, key): # 오버라이딩?\n","        hash_address = self.hash_func(key)\n","        \n","        if self.table[hash_address] != None:\n","            for index in range(len(self.table[hash_address])):\n","              if self.table[hash_address][index][0] == key:\n","                return self.table[hash_address][index][1]\n","        else:\n","            return None\n","        return self.table[self.hash_func(key)]\n","\n","\n","    \n","\n"," \n","# Test code\n"," \n","ht = ChainedHashTable()\n","ht.set('hello', 1)\n","ht.set('hello2', 2)\n","ht.set('hello3', 3)\n","ht.set('hello4', 4)\n"," \n","print(ht.get('hello'), end=' ')\n","print(ht.get('hello2'), end=' ')\n","print(ht.get('hello3'), end=' ')\n","print(ht.get('hello4'), end=' ')\n","print()\n"," \n","ht.set('hello2', 5)\n"," \n","print(ht.get('hello'), end=' ')\n","print(ht.get('hello2'), end=' ')\n","print(ht.get('hello3'), end=' ')\n","print(ht.get('hello4'), end=' ')\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1 2 3 4 \n","1 5 3 4 "],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"kmzckUxxfWkw"},"source":["----\n","\n","**수고하셨습니다!**\n","\n","----"]},{"cell_type":"markdown","metadata":{"id":"tgKiGrOIaU-t"},"source":["## 과제 피드백 작성란\n","\n","----\n","\n","### 과제1(25/25)\n","\n","- 수업시간에 배운 Doubly Linked List를 이용하여 Linked Queue를 구현하는 문제였습니다.\n","- 기능을 잘 구현해 주셨습니다! 아래 예시답안을 첨부하니 참고해 주세요 :)\n","\n","예시 답안)\n","\n","```python\n","class Node:\n","    def __init__(self, data, prev=None, next=None):\n","        self.data = data\n","        self.prev = prev\n","        self.next = next\n","\n","class LinkedQueue:\n","    def __init__(self):\n","        self.front = None\n","        self.rear = None\n","\n","    def is_empty(self):\n","        if self.front is None:\n","            return True\n","        else:\n","            return False\n","\n","    def put(self, data):\n","        if self.rear is None:\n","            self.front = Node(data)\n","            self.rear = self.front\n","        else:\n","            self.rear = Node(data, self.rear, None)\n","            self.rear.prev.next = self.rear\n","\n","    def get(self):\n","        if self.front is None:\n","            return None\n","        elif self.front is self.rear:\n","            data = self.front.data\n","            self.front, self.rear = None, None\n","        else:\n","            data = self.front.data\n","            self.front = self.front.next\n","            self.front.prev = None\n","        return data\n","\n","    def peek(self):\n","        if self.front is None:\n","            return None\n","        else:\n","            return self.front.data\n","\n","```\n","\n","### 과제2(25/25)\n","\n","- Stack 자료구조를 응용하여 계산기를 구현하는 문제였습니다.\n","- Stack의 기능을 활용하여 잘 구현해 주셨습니다. 아래 예시답안도 확인해 주세요 :)\n","\n","예시 답안)\n","\n","```python\n","class Stack:\n","    def __init__(self):\n","        self.list = list()\n","    \n","    def push(self, data):\n","        self.list.append(data)\n","        \n","    def pop(self):\n","        return self.list.pop()\n","\n","class Calculator:\n","    def __init__(self):\n","        self.stack = Stack()\n","    \n","    def calculate(self, string):\n","        for x in string.split(' '):\n","            if x == '+':\n","                self.stack.push(self.stack.pop() + self.stack.pop())\n","            elif x == '-':\n","                self.stack.push(- self.stack.pop() + self.stack.pop())\n","            elif x == '*':\n","                self.stack.push(self.stack.pop() * self.stack.pop())\n","            elif x == '/':\n","                self.stack.push(1 / self.stack.pop() * self.stack.pop())\n","            else:\n","                self.stack.push(int(x))\n","        return self.stack.pop()\n","    \n","calc = Calculator()\n","print(calc.calculate('4 6 * 2 / 2 +'))\n","print(calc.calculate('2 5 + 3 * 6 - 5 *'))\n","\n","```\n","\n","### 과제3(25/25)\n","\n","- Linked List에 추가 기능을 구현하는 문제였습니다.\n","- 기준 node를 찾고, 해당 node의 위치(중간, 헤드, 테일)에 따라 연결을 달리하는 문제입니다.\n","- 잘 구현해 주셨습니다! 아래 예시 답안도 확인해 주세요 :)\n","\n","예시 답안)\n","\n","```python\n","class Node:\n","    def __init__(self, data, prev=None, next=None):\n","        self.prev = prev\n","        self.data = data\n","        self.next = next\n","\n","class NodeMgmt:\n","    def __init__(self, data):\n","        self.head = Node(data)\n","        self.tail = self.head\n","\n","    def insert_before(self, data, before_data):\n","        if self.head == None:\n","            return\n","        else:\n","            node = self.head\n","            while node:\n","                if node.data == before_data:\n","                    new = Node(data, node.prev, node)\n","                    if node == self.head:\n","                        self.head = new\n","                    else:\n","                        node.prev.next = new\n","                    node.prev = new\n","                    return\n","                node = node.next\n","\n","    def insert_after(self, data, after_data):\n","        if self.head == None:\n","            return\n","        else:\n","            node = self.head\n","            while node:\n","                if node.data == after_data:\n","                    new = Node(data, node, node.next)\n","                    if node == self.tail:\n","                        self.tail = new\n","                    else:\n","                        node.next.prev = new\n","                    node.next = new\n","                node = node.next\n","\n","    def insert(self, data):\n","        if self.head == None:\n","            self.head = Node(data)\n","        else:\n","            node = self.head\n","            while node.next:\n","                node = node.next\n","            new = Node(data)\n","            node.next = new\n","            new.prev = node\n","            self.tail = new\n","\n","    def desc(self):\n","        node = self.head\n","        while node:\n","            print (node.data)\n","            node = node.next\n","\n","# Test Code\n","node_mgmt = NodeMgmt(0)\n","for data in range(1, 5):\n","    node_mgmt.insert(data)\n","\n","node_mgmt.insert_before(200, 0)\n","node_mgmt.insert_after(100, 2)\n","node_mgmt.desc()\n","```\n","\n","### 과제4(25/25)\n","\n","- Hash Table에서 Chaining 기법을 구현하는 문제였습니다.\n","- 잘 구현해 주셨습니다! :) 아래 Node를 이용하는 예시 답안도 확인해 주세요 :)\n","\n","예시 답안)\n","\n","```python\n","class HashTable:\n","    def __init__(self):\n","        self.table = [None]*10\n","\n","    def hash_func(self, key):\n","        return ord(key[0]) % 10\n","\n","    def set(self, key, value):\n","        self.table[self.hash_func(key)] = value\n","\n","    def get(self, key):\n","        return self.table[self.hash_func(key)]\n","\n","class Node:\n","    def __init__(self, key, data):\n","        self.key = key\n","        self.data = data\n","        self.next = None\n","    \n","class ChainedHashTable(HashTable):\n","    def __init__(self):\n","        super().__init__()\n","    \n","    def set(self, key, value):\n","        idx = self.hash_func(key)\n","        if self.table[idx] is None:\n","            self.table[idx] = Node(key, value)\n","        else:\n","            node = self.table[idx]\n","            while node.next is not None:\n","                if node.key == key:\n","                    node.data = value\n","                    return\n","                node = node.next\n","            node.next = Node(key, value)\n","            \n","    def get(self, key):\n","        idx = self.hash_func(key)\n","        if self.table[idx] is None:\n","            return None\n","        else:\n","            node = self.table[idx]            \n","            while node.next is not None:\n","                if node.key == key:\n","                    return node.data\n","                node = node.next\n","            if node.key == key:\n","                return node.data\n","            else:\n","                return None\n"," \n","ht = ChainedHashTable()\n","ht.set('hello', 1)\n","ht.set('hello2', 2)\n","ht.set('hello3', 3)\n","ht.set('hello4', 4)\n"," \n","print(ht.get('hello'), end=' ')\n","print(ht.get('hello2'), end=' ')\n","print(ht.get('hello3'), end=' ')\n","print(ht.get('hello4'), end=' ')\n","print()\n"," \n","ht.set('hello2', 5)\n"," \n","print(ht.get('hello'), end=' ')\n","print(ht.get('hello2'), end=' ')\n","print(ht.get('hello3'), end=' ')\n","print(ht.get('hello4'), end=' ')            \n","```\n","\n"]},{"cell_type":"code","metadata":{"id":"F3ykHMQAp3h2"},"source":[""],"execution_count":null,"outputs":[]}]}